list = {}
installed = {}

local function postStatus(type, text)
	os.queueEvent("package_status", type, text)
	while true do
		local event = {os.pullEvent("package_status")}
		if event[1] == "package_status" then break end
	end
end

local function printInformation(text)
	postStatus("info", text)
end

local function printWarning(text)
	postStatus("warning", text)
end

local function printError(text)
	postStatus("error", text)
end

local downloadTypes = {
	github = {
		author = true,
		repository = true,
	},
	bitbucket = {
		author = true,
		repository = true,
	},
	pastebin = {
		url = true,
		filename = true,
	},
	raw = {
		url = true,
		filename = true,
	},
}

local downloadFunctions = {}

downloadFunctions.raw = function(url, path)
	if type(url) == "table" then
		local pack = url
		url = pack.download.url
		path = fs.combine(pack.target, pack.download.filename)
	end
	printInformation("Fetching: "..url)
	http.request(url)
	while true do
		event, url, sourceText = os.pullEvent()
		if event == "http_success" then
			if string.match(path, "(.-)/[^/]+$") and not fs.exists(string.match(path, "(.-)/[^/]+$")) then
				fs.makeDir(string.match(path, "(.-)/[^/]+$"))
				packAPI.addFile(string.match(path, "(.-)/[^/]+$"))
			end
			local fileHandle = io.open(path, "w")
			if fileHandle then
				fileHandle:write(sourceText.readAll())
				fileHandle:close()
				packAPI.addFile(path)
			else
				printWarning("Unable to open file "..path)
			end
			printInformation("Done!")
			return true
		elseif event == "http_failure" then
			printWarning("Unable to fetch file "..url)
			return false
		end
	end
end

downloadFunctions.github = function(package)
	local function getDirectoryContents(path)
		local fType, fPath = {}, {}
		local response = http.get("https://api.github.com/repos/"..package.download.author.."/"..package.download.repository.."/contents/"..path)
		if response then
			response = response.readAll()
			if response ~= nil then
				for str in response:gmatch('"type":%s*"(%w+)",') do table.insert(fType, str) end
				for str in response:gmatch('"path":%s*"([^\"]+)",') do table.insert(fPath, str) end
			end
		else
			printWarning("Can't fetch repository information")
			return nil
		end
		local directoryContents = {}
		for i=1, #fType do
			directoryContents[i] = {type = fType[i], path = fPath[i]}
		end
		return directoryContents
	end
	local function addDirectoryContents(path, contentsTable)
		local contents = getDirectoryContents(path)
		if not contents then return nil, "no contents" end
		for n, file in ipairs(contents) do
			if file.type == "dir" then
				addDirectoryContents(file.path, contentsTable)
			else
				table.insert(contentsTable, file.path)
			end
		end
		return contentsTable
	end
	local contents = addDirectoryContents("", {})
	if not contents then return nil, "content fetch failure" end
	local localTarget = package.target or ""
	for num, fileName in ipairs(contents) do
		if not downloadFunctions.raw("https://raw.github.com/"..package.download.author.."/"..package.download.repository.."/master/"..fileName, fs.combine(localTarget, fileName)) then return false end
	end
	return true
end

downloadFunctions.bitbucket = function(package)
	local function getDirectoryContents(path)
		local directoryContents = {}
		local response = http.get("https://api.bitbucket.org/1.0/repositories/"..package.download.author.."/"..package.download.repository.."/src/default"..path)
		if response then
			response = response.readAll()
			if response ~= nil then
				for str in string.gmatch(string.match(response, '"directories": %[(.-)%]'), '"([^,\"]+)"') do table.insert(directoryContents, {type = "dir", path = str}) end
				for str in string.gmatch(string.match(response, '"files": %[(.-)%]'), '"path": "([^\"]+)"') do table.insert(directoryContents, {type = "file", path = str}) end
			end
		else
			printWarning("Can't fetch repository information")
			return nil
		end
		return directoryContents
	end
	local function addDirectoryContents(path, contentsTable)
		local contents = getDirectoryContents(path)
		for n, file in ipairs(contents) do
			if file.type == "dir" then
				addDirectoryContents(path..file.path.."/", contentsTable)
			else
				table.insert(contentsTable, file.path)
			end
		end
		return contentsTable
	end
	local contents = addDirectoryContents("/", {})
	local localTarget = package.target or ""
	for num, fileName in ipairs(contents) do
		if not downloadFunctions.raw("https://bitbucket.org/"..package.download.author.."/"..package.download.repository.."/raw/default/"..fileName, fs.combine(localTarget, fileName)) then return false end
	end
	return true
end

downloadFunctions.pastebin = function(pack)
	return downloadFunctions.raw("http://pastebin.com/raw.php?i="..pack.download.url, fs.combine(pack.target, pack.download.filename))
end

if fs.exists("/etc/.installed") and fs.isDir("/etc/.installed") then
	for _, file in ipairs(fs.list("/etc/.installed")) do
		local handle = io.open(fs.combine("/etc/installed", file), "r")
		if handle then
			installed[file] = {name = file, files = {}}
			for line in handle:lines() do
				if installed[file].version then
					table.insert(installed[file].files, line)
				else
					installed[file].version = line
				end
			end
			handle:close()
		end
	end
end

function updateDatabase(package, files)
	installed[package.name] = {
		name = package.name,
		version = package.version,
		files = {}
	}
	for i = 1, #files do
		installed[package.name].files[i] = files[i]
	end
end

function writeDatabase(package)
	if package then
		--update the entry of a specific package
		name = type(package) == "table" and package.name or package
		if installed[name] then
			local handle = io.open(fs.combine("/etc/.installed", name), "w")
			handle:write(installed[name].version.."\n")
			for i = 1, #installed[name].files do
				handle:write(installed[name].files[i].."\n")
			end
			handle:close()
		else
			fs.delete(fs.combine("/etc/.installed", name))
		end
	else
		--write all the packages!
		local packageNames = {}
		--both installed
		for packName in pairs(installed) do
			packageNames[packName] = true
		end
		--and recently uninstalled
		for _, file in pairs(fs.list("/etc/.installed")) do
			packageNames[file] = true
		end
		for name in pairs(packageNames) do
			writeDatabase(name)
		end
	end
end

local packAPI = {
	pathList = {}
}

function packAPI.addFile(path)
	table.insert(packAPI.pathList, path)
end

function packAPI.removeFile(path)
	for i = #packAPI.pathList, 1, -1 do
		if packAPI.pathList[i] == path then
			table.remove(packAPI.pathList, i)
		end
	end
end

local scriptEnv = {packman = packAPI}
setmetatable(scriptEnv, {__index = _G})

local Package = {
	install = function(self)
		if downloadFunctions[self.download.type] then
			if not downloadFunctions[self.download.type](self) then return false end
		end
		if #self.setupScript > 0 then
			local setupTable = {}
			for match in string.gmatch(self.setupScript, "(%S+)") do
				table.insert(setupTable, match)
			end
			local programPath = fs.combine(self.target, table.remove(setupTable, 1))
			scriptEnv.shell = getfenv(2).shell
			os.run(scriptEnv, programPath, unpack(setupTable))		
		end
		updateDatabase(self, packAPI.pathList)
		packAPI.pathList = {}
		writeDatabase(self.name)
		return true
	end,
	remove = function(self)
		if not package.installed[self.name] then return false end
		if self.removeScript then
			local removeTable = {}
			for match in string.gmatch(self.removeScript, "(%S+)") do
				table.insert(removeTable, match)
			end
			local programPath = fs.combine(self.target, table.remove(setupTable, 1))
			scriptEnv.shell = getfenv(2).shell
			os.run(scriptEnv, programPath, unpack(setupTable))
		end
		local fileList = package.installed[packageName].files
		for i = 1, #fileList do
			if fs.exists(fileList[i]) then
				if fs.isDir(fileList[i]) then
					if #fs.list(fileList[i]) == 0 then
						fs.delete(fileList[i])
					end
				else
					fs.delete(fileList[i])
				end
			end
		end
		package.installed[self.name] = nil
		writeDatabase(self.name)
	end,
}

local pmetatable = {__index = Package}

function new(name)
	local p = {
		name = name,
		version = "",
		size = 0,
		category = {},
		dependencies = {},
		--installation folder target
		target = "/usr/bin",
		setupScript = "",
		removeScript = "",
		download = {}
	}

	setmetatable(p, pmetatable)

	return p
end

function findDependencies(packageName, _dependencyTable)
	local dependencyTable = _dependencyTable or {}
	if package.list[packageName] then
		dependencyTable[packageName] = true
		for packName in pairs(package.list[packageName].dependencies) do
			if packName ~= "none" and not dependencyTable[packName] then
				dependencyTable, errmsg = package.findDependencies(packName, dependencyTable)
				if not dependencyTable then return nil, errmsg end
			end
		end
	else
		return nil, packageName
	end
	return dependencyTable
end

if not fs.exists("/usr/bin") then fs.makeDir("/usr/bin") end
--process package list
local function addPacks(file)
	local state = ""
	local listHandle = io.open(file, "r")
	local entryTable
	local lineCount = 1
	if listHandle then
		for line in listHandle:lines() do
			if state == "type" then
				local allAttributes = true
				for attribute in pairs(downloadTypes[entryTable.download.type]) do
					if not entryTable.download[attribute] then
						allAttributes = false
						break
					end
				end
				if allAttributes then
					state = "main"
				end
			end
			local property = string.match(line, "^%s*(%S*)")
			if property == "name" and state == "" then
				if state == "" then
					entryTable = new(string.lower(string.match(line, "^%s*name%s*=%s*(%S*)")))
					entryTable.target = "/usr/bin"
					state = "main"
				else
					if state ~= "dirty" then
						printWarning("Unexpected 'name' at line "..lineCount.." in "..file)
						state = "dirty"
					end
				end
			elseif property == "type" then
				if state == "main" then
					entryTable.download.type = string.match(line, "^%s*type%s*=%s*(%S*)")
					if downloadFunctions[entryTable.download.type] then
						state = "type"
					else
						if state ~= "dirty" then
							printWarning("Unknown Repository Format at line "..lineCount.." in "..file)
							state = "dirty"
						end
					end
				else
					if state ~= "dirty" then
						printWarning("Unexpected 'type' at line "..lineCount.." in "..file)
						state = "dirty"
					end
				end
			elseif property == "target" or property == "setup" or property == "update" or property == "remove" or property == "version" or property == "size" then
				if state == "main" then
					entryTable[property] = string.match(line, "^%s*"..property.."%s*=%s*(.*)")
				else
					if state ~= "dirty" then
						printWarning("Unexpected "..property.." at line "..lineCount.." in "..file)
						state = "dirty"
					end
				end
			elseif property == "dependencies" or property == "category" then
				if state == "main" then
					for str in string.gmatch(string.match(line, "^%s*"..property.."%s*=%s*(.*)"), "(%S+)") do
						entryTable[property][str] = true
					end
				else
					if state ~= "dirty" then
						printWarning("Unexpected "..property.." at line "..lineCount.." in "..file)
						state = "dirty"
					end
				end
			elseif property == "end" then
				if state == "dirty" then
					state = ""
				elseif state == "type" then
					printWarning("Unexpected end at line "..lineCount.." in "..file)
					state = ""
				elseif state == "main" then
					--this line is the required entries for a valid repolist entry.
					if entryTable.download.type and #entryTable.version > 0 and tonumber(entryTable.size) > 0 then
						local i
						for name in pairs(entryTable.dependencies) do
							i = true
							break
						end
						if i then
							list[entryTable.name] = entryTable
						end
					else
						entryTable = nil
					end
					state = ""
				end
			elseif state == "type" then
				local propertyFound = false
				for prop in pairs(downloadTypes[entryTable.download.type]) do
					if property == prop then
						propertyFound = true
						break
					end
				end
				if propertyFound then
					entryTable.download[property] = string.match(line, "^%s*"..property.."%s*=%s*(%S*)")
				else
					printWarning("Unexpected "..property.." at line "..lineCount.." in "..file)
					state = "dirty"
				end
			end
			lineCount = lineCount + 1
		end
		if state ~= "" then
			printWarning("Expected 'end' at line "..lineCount.." in "..file)
		end
		listHandle:close()
	else
		printError("Could not open repository list!")
	end
end

for _, file in ipairs(fs.list("/etc/repositories")) do
	addPacks(fs.combine("/etc/repositories", file))
end
